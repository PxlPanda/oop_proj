# inspect_weights.py
import os
import torch
import reprlib

alphabet_path = "backend/recognition/weights/alphabet.txt"
weights_path = "backend/recognition/weights/crnn_weights.pth"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è alphabet.txt
if not os.path.exists(alphabet_path):
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∞–ª—Ñ–∞–≤–∏—Ç–∞: {alphabet_path}")
    exit(1)

# === –ß—Ç–µ–Ω–∏–µ alphabet.txt (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
with open(alphabet_path, encoding="utf-8") as f:
    alphabet_raw = f.read()

print(f"üìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ alphabet.txt (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ): {reprlib.repr(alphabet_raw)}")

alphabet = alphabet_raw.strip("\r\n ")  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ –∫—Ä–∞—è–º

print(f"üìñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ alphabet.txt (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏): {len(alphabet)}")

# === –û–∂–∏–¥–∞–µ–º–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Å–æ–≤ –º–æ–¥–µ–ª–∏ (—Å —É—á—ë—Ç–æ–º blank –¥–ª—è CTC)
nclass_expected = len(alphabet) + 1
print(f"üî† –û–∂–∏–¥–∞–µ–º–æ–µ nclass –¥–ª—è –º–æ–¥–µ–ª–∏ (alphabet + blank): {nclass_expected}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –≤–µ—Å–æ–≤
if not os.path.exists(weights_path):
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏: {weights_path}")
    exit(1)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
checkpoint = torch.load(weights_path, map_location="cpu")

if "model_state_dict" not in checkpoint:
    print("‚ùå –í —Ñ–∞–π–ª–µ –≤–µ—Å–æ–≤ –Ω–µ—Ç –∫–ª—é—á–∞ 'model_state_dict'")
    exit(1)

state_dict = checkpoint["model_state_dict"]

# === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —Å embedding –≤–µ—Å–∞–º–∏, –∏—â–µ–º —Ç–æ—Ç, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç nclass
embedding_keys = [k for k in state_dict.keys() if "embedding.weight" in k]

if not embedding_keys:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á —Å embedding –≤–µ—Å–∞–º–∏ –≤ –º–æ–¥–µ–ª–∏")
    exit(1)

# –í–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª—é—á (–æ–±—ã—á–Ω–æ rnn.1.embedding.weight)
embedding_key = embedding_keys[0]
nclass_actual = state_dict[embedding_key].shape[0]

print(f"üì¶ nclass –∏–∑ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ (–ø–æ –∫–ª—é—á—É '{embedding_key}'): {nclass_actual}")

# === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ nclass
if nclass_expected == nclass_actual:
    print("‚úÖ –í—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç: —Ä–∞–∑–º–µ—Ä—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã.")
else:
    print("‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤!")
    print(f"   alphabet.txt —Å–æ–¥–µ—Ä–∂–∏—Ç {len(alphabet)} —Å–∏–º–≤–æ–ª–æ–≤ (+1 blank = {nclass_expected}),")
    print(f"   –Ω–æ –≤ –≤–µ—Å–∞—Ö –º–æ–¥–µ–ª–∏ nclass = {nclass_actual}.")
    print("   –í–æ–∑–º–æ–∂–Ω–æ, alphabet.txt –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Å–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–ª—Ñ–∞–≤–∏—Ç—É.")
